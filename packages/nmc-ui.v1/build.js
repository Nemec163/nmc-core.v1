const { build } = require('esbuild');
const { execSync } = require('child_process');
const fs = require('fs');

// –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è dist —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if (!fs.existsSync('./dist')) {
  fs.mkdirSync('./dist');
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–±–æ—Ä–∫–∏ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ñ–æ—Ä–º–∞—Ç–æ–º
async function buildBundle(format, outfile) {
  console.log(`–°–±–æ—Ä–∫–∞ ${format} –±–∞–Ω–¥–ª–∞...`);
  try {
    await build({
      entryPoints: ['src/index.ts'],
      bundle: true,
      minify: true,
      sourcemap: true,
      platform: 'neutral',
      format: format,
      outfile: outfile,
      external: ['react', 'react-dom'],
      // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ SCSS —Ñ–∞–π–ª–æ–≤ (–ø—É—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞, —Ç.–∫. –º—ã –∫–æ–º–ø–∏–ª–∏—Ä—É–µ–º SCSS –æ—Ç–¥–µ–ª—å–Ω–æ)
      loader: { 
        '.scss': 'empty' 
      },
      define: {
        'process.env.NODE_ENV': '"production"'
      }
    });
    console.log(`‚úÖ ${format.toUpperCase()} —Å–±–æ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞`);
  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ ${format}:`, error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Å–±–æ—Ä–∫–∏
async function runBuild() {
  try {
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é dist, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (!fs.existsSync('./dist')) {
      fs.mkdirSync('./dist');
    }
    
    // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Å—Ç–∏–ª–µ–π
    if (!fs.existsSync('./dist/styles')) {
      fs.mkdirSync('./dist/styles', { recursive: true });
    }

    // –û—á–∏—Å—Ç–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ dist —Å–æ—Ö—Ä–∞–Ω—è—è —Å–∞–º—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    console.log('–û—á–∏—Å—Ç–∫–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ dist...');
    const files = fs.readdirSync('./dist');
    for (const file of files) {
      const path = `./dist/${file}`;
      if (fs.lstatSync(path).isDirectory()) {
        fs.rmSync(path, { recursive: true, force: true });
      } else {
        fs.unlinkSync(path);
      }
    }
    console.log('‚úÖ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è dist –æ—á–∏—â–µ–Ω–∞');

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è TypeScript –¥–µ–∫–ª–∞—Ä–∞—Ü–∏–π
    console.log('–ì–µ–Ω–µ—Ä–∞—Ü–∏—è TypeScript –¥–µ–∫–ª–∞—Ä–∞—Ü–∏–π...');
    execSync('tsc --emitDeclarationOnly');
    console.log('‚úÖ TypeScript –¥–µ–∫–ª–∞—Ä–∞—Ü–∏–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã');

    // –ó–∞–ø—É—Å–∫ esbuild –¥–ª—è CJS –∏ ESM –≤–µ—Ä—Å–∏–π
    await buildBundle('cjs', 'dist/index.js');
    await buildBundle('esm', 'dist/index.esm.js');

    // –ö–æ–º–ø–∏–ª—è—Ü–∏—è SCSS
    console.log('–ö–æ–º–ø–∏–ª—è—Ü–∏—è SCSS...');
    execSync('sass src/styles/index.scss dist/styles/index.css');
    console.log('‚úÖ SCSS —Å–∫–æ–º–ø–∏–ª–∏—Ä–æ–≤–∞–Ω—ã');

    // –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ SCSS —Ñ–∞–π–ª–æ–≤
    console.log('–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ SCSS —Ñ–∞–π–ª–æ–≤...');
    execSync('cpx "src/**/*.scss" dist');
    console.log('‚úÖ SCSS —Ñ–∞–π–ª—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã');

    console.log('üéâ –°–±–æ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ:', error);
    process.exit(1);
  }
}

runBuild();