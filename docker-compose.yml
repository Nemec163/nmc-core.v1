services:
  nginx:
    image: nginx:alpine
    container_name: nmc-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./services/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./services/nginx/conf.d:/etc/nginx/conf.d:ro
      - storybook-static:/var/www/storybook:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
    networks:
      - nmc-network
    depends_on:
      nmc-site:
        condition: service_healthy
      nmc-server:
        condition: service_healthy
      nmc-storybook:
        condition: service_completed_successfully
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80/health" ]
      interval: 30s
      timeout: 10s
      retries: 3

  nmc-site:
    build:
      context: .
      dockerfile: apps/nmc-site.v1/Dockerfile
      # Enable BuildKit optimizations
      cache_from:
        - nmc-site:latest
        - localhost:5000/nmc/cache:site-deps
        - localhost:5000/nmc/cache:site-build
      # Build arguments for optimization
      args:
        - BUILDKIT_INLINE_CACHE=1
    image: nmc-site:latest
    container_name: nmc-site
    expose:
      - "3000"
    networks:
      - nmc-network
    restart: unless-stopped
    # Security: Read-only root filesystem
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  nmc-server:
    build:
      context: .
      dockerfile: apps/nmc-server.v1/Dockerfile
      # Enable BuildKit optimizations
      cache_from:
        - nmc-server:latest
        - localhost:5000/nmc/cache:server-deps
        - localhost:5000/nmc/cache:server-build
      # Build arguments for optimization
      args:
        - BUILDKIT_INLINE_CACHE=1
    image: nmc-server:latest
    container_name: nmc-server
    expose:
      - "3001"
    networks:
      - nmc-network
    restart: unless-stopped
    # Security: Read-only root filesystem
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    cap_drop:
      - ALL
    cap_add:
      - CHOWN
      - SETGID
      - SETUID
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  nmc-storybook:
    build:
      context: .
      dockerfile: packages/nmc-storybook.v1/Dockerfile
      target: export
      # Enable BuildKit optimizations
      cache_from:
        - localhost:5000/nmc/cache:storybook-deps
        - localhost:5000/nmc/cache:storybook-build
      # Build arguments for optimization
      args:
        - BUILDKIT_INLINE_CACHE=1
        - NODE_ENV=production
    container_name: nmc-storybook-builder
    volumes:
      - storybook-static:/output
    command: ['sh', '-c', 'cp -r /storybook-static/* /output/ && echo "Storybook build completed"']
    deploy:
      resources:
        limits:
          memory: 4G
          cpus: '2'
        reservations:
          memory: 2G
          cpus: '1'

  # Local registry for BuildKit cache (development)
  registry:
    image: registry:2
    container_name: nmc-registry
    ports:
      - "5000:5000"
    volumes:
      - registry-data:/var/lib/registry
    restart: unless-stopped
    profiles:
      - development

volumes:
  storybook-static:
  registry-data:

networks:
  nmc-network:
    driver: bridge
