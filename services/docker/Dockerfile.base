# syntax=docker/dockerfile:1.7-labs
# Shared base image with BuildKit optimization
FROM node:20-alpine AS node-base

# Security: Run as non-root user
ARG UID=1001
ARG GID=1001
RUN addgroup --system --gid ${GID} appgroup && \
    adduser --system --uid ${UID} --ingroup appgroup appuser

# Install system dependencies and tools
RUN apk add --no-cache \
    curl \
    ca-certificates \
    tzdata \
    dumb-init && \
    # Security: Remove package cache
    rm -rf /var/cache/apk/*

# Enable and configure pnpm with caching
ENV PNPM_HOME="/pnpm"
ENV PATH="$PNPM_HOME:$PATH"
RUN corepack enable && \
    corepack prepare pnpm@latest --activate && \
    pnpm config set store-dir ~/.pnpm-store

# Set working directory
WORKDIR /app

# Cache mount for pnpm store
ENV PNPM_CACHE_FOLDER=/pnpm-cache

# Dependencies stage with optimized caching
FROM node-base AS deps-base
# Copy workspace files for dependency resolution
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml turbo.json ./
COPY tsconfig.base.json ./

# Create cache directories
RUN mkdir -p /pnpm-cache && chown -R appuser:appgroup /pnpm-cache /app

# Build stage base
FROM node-base AS build-base
# Copy all source files (will be filtered by specific builds)
COPY --chown=appuser:appgroup . .
RUN chown -R appuser:appgroup /app

# Production runtime base
FROM node-base AS runtime-base
# Security hardening
RUN apk add --no-cache tini && \
    rm -rf /var/cache/apk/*

# Switch to non-root user
USER appuser
WORKDIR /app

# Use tini as init system for proper signal handling
ENTRYPOINT ["/sbin/tini", "--"]

# Health check tools
RUN mkdir -p /home/appuser/.local/bin
ENV PATH="/home/appuser/.local/bin:$PATH"
